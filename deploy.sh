#!/bin/bash

# Script de d√©ploiement automatis√© pour SmooveBox V2
# Usage: ./deploy.sh [environment]
# Environments: staging, production

set -e

ENVIRONMENT=${1:-production}
PROJECT_NAME="smoovebox-v2"

echo "üöÄ D√©ploiement de $PROJECT_NAME en environnement: $ENVIRONMENT"

# V√©rification des pr√©requis
echo "üìã V√©rification des pr√©requis..."

if ! command -v supabase &> /dev/null; then
    echo "‚ùå Supabase CLI n'est pas install√©. Installez-le avec: npm install -g supabase"
    exit 1
fi

if ! command -v vercel &> /dev/null; then
    echo "‚ùå Vercel CLI n'est pas install√©. Installez-le avec: npm install -g vercel"
    exit 1
fi

# V√©rification des variables d'environnement
echo "üîê V√©rification des variables d'environnement..."

if [ ! -f ".env" ]; then
    echo "‚ùå Fichier .env manquant. Copiez .env.example vers .env et configurez les variables."
    exit 1
fi

# Source des variables d'environnement
source .env

required_vars=("VITE_SUPABASE_URL" "VITE_SUPABASE_ANON_KEY" "VITE_OPENAI_API_KEY" "SUPABASE_SERVICE_ROLE_KEY")

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå Variable d'environnement manquante: $var"
        exit 1
    fi
done

echo "‚úÖ Toutes les variables d'environnement sont configur√©es"

# Build du frontend
echo "üî® Construction du frontend..."
npm install
npm run build

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec de la construction du frontend"
    exit 1
fi

echo "‚úÖ Frontend construit avec succ√®s"

# D√©ploiement des Edge Functions
echo "üîß D√©ploiement des Edge Functions Supabase..."

# V√©rification de la connexion Supabase
if ! supabase status &> /dev/null; then
    echo "üîó Connexion au projet Supabase..."
    supabase link --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')
fi

# Configuration des secrets
echo "üîê Configuration des secrets Supabase..."
supabase secrets set OPENAI_API_KEY="$VITE_OPENAI_API_KEY" --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')
supabase secrets set SUPABASE_SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY" --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')

# D√©ploiement des fonctions
echo "üì§ D√©ploiement des fonctions Edge..."
supabase functions deploy process-video --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')
supabase functions deploy storage-webhook --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec du d√©ploiement des Edge Functions"
    exit 1
fi

echo "‚úÖ Edge Functions d√©ploy√©es avec succ√®s"

# D√©ploiement des migrations de base de donn√©es
echo "üóÑÔ∏è Application des migrations de base de donn√©es..."
supabase db push --project-ref $(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec de l'application des migrations"
    exit 1
fi

echo "‚úÖ Migrations appliqu√©es avec succ√®s"

# D√©ploiement du frontend
echo "üåê D√©ploiement du frontend sur Vercel..."

if [ "$ENVIRONMENT" = "production" ]; then
    vercel --prod --yes
else
    vercel --yes
fi

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec du d√©ploiement du frontend"
    exit 1
fi

echo "‚úÖ Frontend d√©ploy√© avec succ√®s"

# Tests post-d√©ploiement
echo "üß™ Ex√©cution des tests post-d√©ploiement..."

# Test de sant√© des Edge Functions
echo "üîç Test des Edge Functions..."
FUNCTION_URL="$VITE_SUPABASE_URL/functions/v1/process-video"

# Test simple de la fonction (devrait retourner 405 pour GET)
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_URL")

if [ "$HTTP_STATUS" = "405" ]; then
    echo "‚úÖ Edge Function process-video r√©pond correctement"
else
    echo "‚ö†Ô∏è Edge Function process-video retourne un statut inattendu: $HTTP_STATUS"
fi

echo ""
echo "üéâ D√©ploiement termin√© avec succ√®s!"
echo ""
echo "üìä R√©sum√© du d√©ploiement:"
echo "   - Environnement: $ENVIRONMENT"
echo "   - Frontend: D√©ploy√© sur Vercel"
echo "   - Backend: Edge Functions d√©ploy√©es sur Supabase"
echo "   - Base de donn√©es: Migrations appliqu√©es"
echo ""
echo "üîó Liens utiles:"
echo "   - Application: $(vercel --scope $(vercel whoami) ls $PROJECT_NAME --meta url 2>/dev/null | tail -1 || echo 'URL non disponible')"
echo "   - Dashboard Supabase: $VITE_SUPABASE_URL"
echo "   - Logs Edge Functions: supabase functions logs process-video"
echo ""
echo "üìù Prochaines √©tapes:"
echo "   1. Tester l'application en production"
echo "   2. Surveiller les logs pour d√©tecter d'√©ventuels probl√®mes"
echo "   3. Configurer le monitoring et les alertes"

